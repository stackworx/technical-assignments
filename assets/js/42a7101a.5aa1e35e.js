"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[765],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var o=n.createContext({}),u=function(e){var t=n.useContext(o),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=u(r),d=a,m=h["".concat(o,".").concat(d)]||h[d]||p[d]||i;return r?n.createElement(m,s(s({ref:t},c),{},{components:r})):n.createElement(m,s({ref:t},c))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=h;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var u=2;u<i;u++)s[u]=r[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},4617:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return h}});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),s=r(4996),l=["components"],o={title:"Brief"},u=void 0,c={unversionedId:"nodejs/brief",id:"nodejs/brief",title:"Brief",description:"Please install the required tools before continuing",source:"@site/docs/nodejs/brief.mdx",sourceDirName:"nodejs",slug:"/nodejs/brief",permalink:"/technical-assignments/docs/nodejs/brief",editUrl:"https://github.com/stackworx/technical-assignments/edit/master/docs/docs/nodejs/brief.mdx",tags:[],version:"current",frontMatter:{title:"Brief"},sidebar:"someSidebar",previous:{title:"Requirements",permalink:"/technical-assignments/docs/nodejs/requirements"},next:{title:"Requirements",permalink:"/technical-assignments/docs/dotnet/requirements"}},p={},h=[{value:"Requirements",id:"requirements",level:3},{value:"Bonus Requirements (Difficulty in brackets):",id:"bonus-requirements-difficulty-in-brackets",level:3},{value:"Help",id:"help",level:3},{value:"Hints",id:"hints",level:3},{value:"Resources",id:"resources",level:3}],d={toc:h};function m(e){var t=e.components,r=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Please install the ",(0,i.kt)("a",{parentName:"p",href:"requirements"},"required")," tools before continuing"),(0,i.kt)("p",null,"The goal of this project is to create a simple server that aggregates website health checks."),(0,i.kt)("p",null,"First download the project zip from ",(0,i.kt)("a",{href:(0,s.Z)("project/nodejs-master.zip")},"here"),".\nUnzip the file and and examine the instructions in the Readme"),(0,i.kt)("h3",{id:"requirements"},"Requirements"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use the ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/sindresorhus/got"},"got")," library to do a get request against the server health check URI's embedded in the project. Consider any non 2xx response a failure"),(0,i.kt)("li",{parentName:"ul"},"These results should be automatically fetched every 5 minutes (hint: use a lower value during testing)"),(0,i.kt)("li",{parentName:"ul"},"Make sure the fetch request timeout is lower than 5 minutes"),(0,i.kt)("li",{parentName:"ul"},"Make the health check calls in parallel"),(0,i.kt)("li",{parentName:"ul"},"Store the last successful health check time in ",(0,i.kt)("inlineCode",{parentName:"li"},"lastTimeUp")),(0,i.kt)("li",{parentName:"ul"},"Ensure the checker is de-registered when the server shuts down"),(0,i.kt)("li",{parentName:"ul"},"Add an error field to Server object which contains the status code and response body when the health check fails")),(0,i.kt)("p",null,"Example Error Response:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "servers": [\n      {\n        "id": 1,\n        "name": "Server1",\n        "healthCheckUri": "https://stackworx.io",\n        "status": "DOWN",\n        "error": {\n          "status": 500,\n          "body": "An Internal Server Error Occurred"\n        }\n      }\n    ]\n  }\n}\n')),(0,i.kt)("h3",{id:"bonus-requirements-difficulty-in-brackets"},"Bonus Requirements (Difficulty in brackets):"),(0,i.kt)("p",null,"Bonus requirements for extra credit. Not listed in any particular order"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Persist the server status and last up time somewhere so that they are not lost between server restarts (5)"),(0,i.kt)("li",{parentName:"ul"},"Abstract all the code into a server layer and keep that code separate from the GraphQL code (2)"),(0,i.kt)("li",{parentName:"ul"},"Add a filter parameter to the server field so that a user can request results for only specific servers (2)"),(0,i.kt)("li",{parentName:"ul"},"Add a filter to only fetch servers with a specific status. E.g. DOWN (2)"),(0,i.kt)("li",{parentName:"ul"},"Create a mutation to disable the checking of a server (10)")),(0,i.kt)("h3",{id:"help"},"Help"),(0,i.kt)("p",null,"Send an email to ",(0,i.kt)("a",{parentName:"p",href:"mailto:assignment@stackworx.io"},"assignment@stackworx.io")," if you get stuck"),(0,i.kt)("h3",{id:"hints"},"Hints"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use ",(0,i.kt)("a",{parentName:"li",href:"http://httpstat.us/"},"httpstat")," to simulate failures"),(0,i.kt)("li",{parentName:"ul"},"Graphql Resolvers can be async or return promises"),(0,i.kt)("li",{parentName:"ul"},"Use an IDE that understands typescript")),(0,i.kt)("h3",{id:"resources"},"Resources"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://graphql.org/learn/"},"https://graphql.org/learn/"))))}m.isMDXComponent=!0}}]);